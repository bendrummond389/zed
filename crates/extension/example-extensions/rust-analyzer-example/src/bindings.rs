// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
#[derive(Clone)]
pub struct Command {
  pub command: wit_bindgen::rt::string::String,
  pub args: wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>,
  pub env: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,wit_bindgen::rt::string::String,)>,
}
impl ::core::fmt::Debug for Command {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("Command").field("command", &self.command).field("args", &self.args).field("env", &self.env).finish()
  }
}
#[derive(Clone)]
pub struct GithubReleaseAsset {
  pub name: wit_bindgen::rt::string::String,
  pub download_url: wit_bindgen::rt::string::String,
}
impl ::core::fmt::Debug for GithubReleaseAsset {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("GithubReleaseAsset").field("name", &self.name).field("download-url", &self.download_url).finish()
  }
}
#[derive(Clone)]
pub struct GithubRelease {
  pub version: wit_bindgen::rt::string::String,
  pub assets: wit_bindgen::rt::vec::Vec::<GithubReleaseAsset>,
}
impl ::core::fmt::Debug for GithubRelease {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("GithubRelease").field("version", &self.version).field("assets", &self.assets).finish()
  }
}
#[allow(unused_unsafe, clippy::all)]
pub fn npm_package_latest_version(package_name: &str,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  unsafe {
    
    #[repr(align(4))]
    struct RetArea([u8; 12]);
    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
    let vec0 = package_name;
    let ptr0 = vec0.as_ptr() as i32;
    let len0 = vec0.len() as i32;
    let ptr1 = ret_area.as_mut_ptr() as i32;
    #[cfg(target_arch = "wasm32")]
    #[link(wasm_import_module = "$root")]
    extern "C" {
      #[link_name = "npm-package-latest-version"]
      fn wit_import(_: i32, _: i32, _: i32, );
    }
    
    #[cfg(not(target_arch = "wasm32"))]
    fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
    wit_import(ptr0, len0, ptr1);
    let l2 = i32::from(*((ptr1 + 0) as *const u8));
    match l2 {
      0 => {
        let e = {
          let l3 = *((ptr1 + 4) as *const i32);
          let l4 = *((ptr1 + 8) as *const i32);
          let len5 = l4 as usize;
          let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
          
          wit_bindgen::rt::string_lift(bytes5)
        };
        Ok(e)
      }
      1 => {
        let e = {
          let l6 = *((ptr1 + 4) as *const i32);
          let l7 = *((ptr1 + 8) as *const i32);
          let len8 = l7 as usize;
          let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
          
          wit_bindgen::rt::string_lift(bytes8)
        };
        Err(e)
      }
      _ => wit_bindgen::rt::invalid_enum_discriminant(),
    }
  }
}
#[allow(unused_unsafe, clippy::all)]
pub fn latest_github_release(repo: &str,) -> Result<GithubRelease,wit_bindgen::rt::string::String>{
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  unsafe {
    
    #[repr(align(4))]
    struct RetArea([u8; 20]);
    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
    let vec0 = repo;
    let ptr0 = vec0.as_ptr() as i32;
    let len0 = vec0.len() as i32;
    let ptr1 = ret_area.as_mut_ptr() as i32;
    #[cfg(target_arch = "wasm32")]
    #[link(wasm_import_module = "$root")]
    extern "C" {
      #[link_name = "latest-github-release"]
      fn wit_import(_: i32, _: i32, _: i32, );
    }
    
    #[cfg(not(target_arch = "wasm32"))]
    fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
    wit_import(ptr0, len0, ptr1);
    let l2 = i32::from(*((ptr1 + 0) as *const u8));
    match l2 {
      0 => {
        let e = {
          let l3 = *((ptr1 + 4) as *const i32);
          let l4 = *((ptr1 + 8) as *const i32);
          let len5 = l4 as usize;
          let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
          let l6 = *((ptr1 + 12) as *const i32);
          let l7 = *((ptr1 + 16) as *const i32);
          let base14 = l6;
          let len14 = l7;
          let mut result14 = Vec::with_capacity(len14 as usize);
          for i in 0..len14 {
            let base = base14 + i * 16;
            let e14 = {
              let l8 = *((base + 0) as *const i32);
              let l9 = *((base + 4) as *const i32);
              let len10 = l9 as usize;
              let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
              let l11 = *((base + 8) as *const i32);
              let l12 = *((base + 12) as *const i32);
              let len13 = l12 as usize;
              let bytes13 = Vec::from_raw_parts(l11 as *mut _, len13, len13);
              
              GithubReleaseAsset{
                name: wit_bindgen::rt::string_lift(bytes10),
                download_url: wit_bindgen::rt::string_lift(bytes13),
              }
            };
            result14.push(e14);
          }
          wit_bindgen::rt::dealloc(base14, (len14 as usize) * 16, 4);
          
          GithubRelease{
            version: wit_bindgen::rt::string_lift(bytes5),
            assets: result14,
          }
        };
        Ok(e)
      }
      1 => {
        let e = {
          let l15 = *((ptr1 + 4) as *const i32);
          let l16 = *((ptr1 + 8) as *const i32);
          let len17 = l16 as usize;
          let bytes17 = Vec::from_raw_parts(l15 as *mut _, len17, len17);
          
          wit_bindgen::rt::string_lift(bytes17)
        };
        Err(e)
      }
      _ => wit_bindgen::rt::invalid_enum_discriminant(),
    }
  }
}
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "get-language-server-command"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_get_language_server_command() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::get_language_server_command();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    match result0 {
      Ok(e) => { {
        *((ptr1 + 0) as *mut u8) = (0i32) as u8;
        let Command{ command:command2, args:args2, env:env2, } = e;
        let vec3 = (command2.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr() as i32;
        let len3 = vec3.len() as i32;
        ::core::mem::forget(vec3);
        *((ptr1 + 8) as *mut i32) = len3;
        *((ptr1 + 4) as *mut i32) = ptr3;
        let vec5 = args2;
        let len5 = vec5.len() as i32;
        let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 8, 4);
        let result5 = if layout5.size() != 0
        {
          let ptr = alloc::alloc(layout5);
          if ptr.is_null()
          {
            alloc::handle_alloc_error(layout5);
          }
          ptr
        }else {{
          ::core::ptr::null_mut()
        }};
        for (i, e) in vec5.into_iter().enumerate() {
          let base = result5 as i32 + (i as i32) * 8;
          {
            let vec4 = (e.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((base + 4) as *mut i32) = len4;
            *((base + 0) as *mut i32) = ptr4;
          }
        }
        *((ptr1 + 16) as *mut i32) = len5;
        *((ptr1 + 12) as *mut i32) = result5 as i32;
        let vec9 = env2;
        let len9 = vec9.len() as i32;
        let layout9 = alloc::Layout::from_size_align_unchecked(vec9.len() * 16, 4);
        let result9 = if layout9.size() != 0
        {
          let ptr = alloc::alloc(layout9);
          if ptr.is_null()
          {
            alloc::handle_alloc_error(layout9);
          }
          ptr
        }else {{
          ::core::ptr::null_mut()
        }};
        for (i, e) in vec9.into_iter().enumerate() {
          let base = result9 as i32 + (i as i32) * 16;
          {
            let (t6_0, t6_1, ) = e;
            let vec7 = (t6_0.into_bytes()).into_boxed_slice();
            let ptr7 = vec7.as_ptr() as i32;
            let len7 = vec7.len() as i32;
            ::core::mem::forget(vec7);
            *((base + 4) as *mut i32) = len7;
            *((base + 0) as *mut i32) = ptr7;
            let vec8 = (t6_1.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr() as i32;
            let len8 = vec8.len() as i32;
            ::core::mem::forget(vec8);
            *((base + 12) as *mut i32) = len8;
            *((base + 8) as *mut i32) = ptr8;
          }
        }
        *((ptr1 + 24) as *mut i32) = len9;
        *((ptr1 + 20) as *mut i32) = result9 as i32;
      } },
      Err(e) => { {
        *((ptr1 + 0) as *mut u8) = (1i32) as u8;
        let vec10 = (e.into_bytes()).into_boxed_slice();
        let ptr10 = vec10.as_ptr() as i32;
        let len10 = vec10.len() as i32;
        ::core::mem::forget(vec10);
        *((ptr1 + 8) as *mut i32) = len10;
        *((ptr1 + 4) as *mut i32) = ptr10;
      } },
    };ptr1
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_get-language-server-command"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_get_language_server_command(arg0: i32,) {
      let l0 = i32::from(*((arg0 + 0) as *const u8));
      match l0 {
        0 => {
          let l1 = *((arg0 + 4) as *const i32);
          let l2 = *((arg0 + 8) as *const i32);
          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
          let l5 = *((arg0 + 12) as *const i32);
          let l6 = *((arg0 + 16) as *const i32);
          let base7 = l5;
          let len7 = l6;
          for i in 0..len7 {
            let base = base7 + i *8;
            {
              let l3 = *((base + 0) as *const i32);
              let l4 = *((base + 4) as *const i32);
              wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
            }
          }
          wit_bindgen::rt::dealloc(base7, (len7 as usize) * 8, 4);
          let l12 = *((arg0 + 20) as *const i32);
          let l13 = *((arg0 + 24) as *const i32);
          let base14 = l12;
          let len14 = l13;
          for i in 0..len14 {
            let base = base14 + i *16;
            {
              let l8 = *((base + 0) as *const i32);
              let l9 = *((base + 4) as *const i32);
              wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
              let l10 = *((base + 8) as *const i32);
              let l11 = *((base + 12) as *const i32);
              wit_bindgen::rt::dealloc(l10, (l11) as usize, 1);
            }
          }
          wit_bindgen::rt::dealloc(base14, (len14 as usize) * 16, 4);
        },
        _ => {
          let l15 = *((arg0 + 4) as *const i32);
          let l16 = *((arg0 + 8) as *const i32);
          wit_bindgen::rt::dealloc(l15, (l16) as usize, 1);
        },
      }
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn get_language_server_command() -> Result<Command,wit_bindgen::rt::string::String>;
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 28]);
static mut _RET_AREA: _RetArea = _RetArea([0; 28]);

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:language-server-extension"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 509] = [3, 0, 25, 108, 97, 110, 103, 117, 97, 103, 101, 45, 115, 101, 114, 118, 101, 114, 45, 101, 120, 116, 101, 110, 115, 105, 111, 110, 0, 97, 115, 109, 13, 0, 1, 0, 7, 219, 2, 1, 65, 2, 1, 65, 19, 1, 112, 115, 1, 111, 2, 115, 115, 1, 112, 1, 1, 114, 3, 7, 99, 111, 109, 109, 97, 110, 100, 115, 4, 97, 114, 103, 115, 0, 3, 101, 110, 118, 2, 3, 0, 7, 99, 111, 109, 109, 97, 110, 100, 3, 0, 3, 1, 114, 2, 4, 110, 97, 109, 101, 115, 12, 100, 111, 119, 110, 108, 111, 97, 100, 45, 117, 114, 108, 115, 3, 0, 20, 103, 105, 116, 104, 117, 98, 45, 114, 101, 108, 101, 97, 115, 101, 45, 97, 115, 115, 101, 116, 3, 0, 5, 1, 112, 6, 1, 114, 2, 7, 118, 101, 114, 115, 105, 111, 110, 115, 6, 97, 115, 115, 101, 116, 115, 7, 3, 0, 14, 103, 105, 116, 104, 117, 98, 45, 114, 101, 108, 101, 97, 115, 101, 3, 0, 8, 1, 106, 1, 115, 1, 115, 1, 64, 1, 12, 112, 97, 99, 107, 97, 103, 101, 45, 110, 97, 109, 101, 115, 0, 10, 3, 0, 26, 110, 112, 109, 45, 112, 97, 99, 107, 97, 103, 101, 45, 108, 97, 116, 101, 115, 116, 45, 118, 101, 114, 115, 105, 111, 110, 1, 11, 1, 106, 1, 9, 1, 115, 1, 64, 1, 4, 114, 101, 112, 111, 115, 0, 12, 3, 0, 21, 108, 97, 116, 101, 115, 116, 45, 103, 105, 116, 104, 117, 98, 45, 114, 101, 108, 101, 97, 115, 101, 1, 13, 1, 106, 1, 4, 1, 115, 1, 64, 0, 0, 14, 4, 0, 27, 103, 101, 116, 45, 108, 97, 110, 103, 117, 97, 103, 101, 45, 115, 101, 114, 118, 101, 114, 45, 99, 111, 109, 109, 97, 110, 100, 1, 15, 4, 1, 55, 122, 101, 100, 58, 108, 97, 110, 103, 117, 97, 103, 101, 45, 115, 101, 114, 118, 101, 114, 45, 101, 120, 116, 101, 110, 115, 105, 111, 110, 47, 108, 97, 110, 103, 117, 97, 103, 101, 45, 115, 101, 114, 118, 101, 114, 45, 101, 120, 116, 101, 110, 115, 105, 111, 110, 4, 0, 11, 31, 1, 0, 25, 108, 97, 110, 103, 117, 97, 103, 101, 45, 115, 101, 114, 118, 101, 114, 45, 101, 120, 116, 101, 110, 115, 105, 111, 110, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
